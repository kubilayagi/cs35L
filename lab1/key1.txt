Exercise 1.1
1. e m a c s SPC e x e r 1 . h t m l 
2. C-s P U ESC f
3. C-s L a ESC b
4. C-s s e l f ESC b
5. C-s a r r o w ESC b
6. C-e
7. C-a
8. I already did it without arrow keys
9. No
10. C-x C-c n y e s

Exercise 1.2 
1. e m a c s SPC e x e r 2 . h t m l
2. ESC-g g 1 8 C-k
3. C-s < ! C-a C-k
4. C-s < ! C-a C-SPC C-s - > RET C-w
5. C-s < ! RET C-r < RET C-SPC C-s > RET C-w
C-s < ! C-a C-k

Exercise 1.3
1. e m a c s SPC e x e r 3 . h t m l
2. C-s t SPC 1 ESC-Shift-5 t SPC 3 7 RET y y C-u
3. M - < C-s U T F - 8 ESC-Shift-5 U S - A S C I I RET y C-u
4. C-s < / o C-a RET
5. C-x C-c

Exercise 1.4
3. ESC-> UP C-SPC C-r < RET C-w ESC-g g 3 5 3 C-y
4. ESC-> C-r - > RET RIGHT RIGHT C-SPC C-r < RET C-w ESC-g g 3 3 8 
C-s < / RET LEFT LEFT LEFT C-y

ESC-> C-r - > RET RIGHT RIGHT C-SPC C-r < ! RET C-w ESC-g g 3 0 2 C-y

ESC-> C-r < ! RET C-SPC C-e C-w ESC-g g 9 2 C-y

ESC-> C-r < ! RET C-SPC C-e C-w ESC-g g 1 7 C-y

5. ESC-> C-SPC ESC-g g 3 5 6 C-w
6. C-x u
7. ESC-g g 3 5 6 < ! - - ESC-> - - > 
8. ESC-< ESC-% < o l > RET < O l > RET y y y y y y y
There were 7 replacements and therfore 7 instances
9. d i f f SPC - u SPC e x e r 1 . h t m l SPC e x e r 4 . h t m l SPC
> e x e r 4 . d i f f RET

Exercise 1.5
1. e m a c s RET
ESC-x m k d i r
j u n k RET

2. ESC-x c d RET
j u n k RET
C-x C-f h e l l o . c RET
Copy and paste code from assignment into the file
C-x C-s

3. ESC-x c o m p i l e RET
C-SPC LEFT LEFT LEFT LEFT LEFT LEFT LEFT LEFT C-w
g c c SPC - o SPC h e l l o SPC h e l l o . c RET

4. ESC-x SPC c o m p i l e RET
C-SPC ALT-Click C-w
The ALT-Click is a feature that lets you move the cursor to wherever you want
This may be a feature only available on Mac - I just used it to delete
existing text in the text area
C-x o C-x C-w h e l l o - o u t RET

5. C-x C-f DEL DEL DEL DEL DEL c s 3 5 L / k e y 1 . t x t RET
ESC-> C-x o C-SPC ESC-> C-w
The above key strokes did not work because the file is read only
ESC-< C-SPC ESC-> ESC-x a p p e n d - t o - f i l e RET
c s 3 5 L / k e y 1 . t x t RET
 
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Wed Oct  4 23:20:42

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  
  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = 
  %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, 
  n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Wed Oct  4 23:20:42

(I needed to change the output becuase of the line length constraint)

Exercise 1.6 
1. C-x b RET
2. ( r a n d o m ) C-j
3. ( s e t q SPC x ( r a n d o m ) ) C-j RET
( s e t q SPC y ( r a n d o m ) ) C-j
4. ( * SPC x SPC y ) C-j
x was 240297388387795811
y was 2034564126519371768
result was -2108240072530666264

5. ESC-: ( * SPC x SPC y ) RET
result: -2108240072530666264 (#o212760155135744156350, #x22be06d2ef90dce8)

6. All random numbers generated by computers are given a certain seed that
they use to generate the random numbers. In that sense they are not random
and can be replicated but for general use they can be considered random.

7. The possibility for the prodcut to overflow is:
1 - 2*(2^64 - 2^32)
I got this answer because the number of digits in each of the operands
determines the number of digits of the outcomes. The 2^64 - 2^32 comes
from the numbers above 2^32 overflowing when multiplied by the other
operand (which is why that is multiplied by two because there are two 
operands. 


